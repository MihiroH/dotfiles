[ghq]
  root = ~/Documents
[core]
	excludesFile = ~/.config/git/ignore
  editor = /opt/homebrew/bin/nvim
[user]
    name = MihiroH
    email = mihiro.hashimoto.1125@gmail.com
    mail = mihiro.hashimoto.1125@gmail.com
[includeIf "gitdir:~/Documents/personal/"]
  path = .gitconfig-personal
[commit]
    template = ~/.stCommitMsg
[http]
    postBuffer = 1048576000
[alias]
    # 標準的なコマンド
    b = branch
    c = commit
    cm = commit -m
    f = fetch
    s = status
    st = stash
    rh = reset --hard

    # リモート含めブランチをcheckoutする
    co = "!f() { args=$@; if [ -z \"$args\" ]; then branch=$(git branch --all | grep -v HEAD | fzf --preview 'echo {} | cut -c 3- | xargs git log --color=always' | cut -c 3-); git checkout $(echo $branch | sed 's#remotes/[^/]*/##'); else git checkout $args; fi }; f"

    # 選択したブランチをrebaseする
    reb = "!f() { args=$@; if [ -z \"$args\" ]; then branch=$(git branch --all | grep -v HEAD | fzf --preview 'echo {} | cut -c 3- | xargs git log --color=always' | cut -c 3-); git rebase $(echo $branch | sed 's#remotes/[^/]*/##'); fi }; f"

    # 選択したブランチをmergeする
    mer = "!f() { args=$@; if [ -z \"$args\" ]; then branch=$(git branch --all | grep -v HEAD | fzf --preview 'echo {} | cut -c 3- | xargs git log --color=always' | cut -c 3-); git merge $(echo $branch | sed 's#remotes/[^/]*/##'); fi }; f"

    # ファイルの差分をプレビュー付きで確認する
    d = "!f() { args=$@; [ -z \"$args\" ] && args=HEAD; ([ \"$args\" = \"HEAD\" ] && git status --short || git diff --name-status $args | sed 's/\t/  /') | fzf --preview \"echo {} | cut -c 4- | xargs git diff --color=always $args --\" --multi --height 90% | cut -c 4-; }; f"

    # スタッシュのリストを表示する
    stl = !git stash list | fzf --preview 'echo {} | cut -d':' -f1 | xargs git stash show -p --color=always' --height 90% | cut -d':' -f1

    # スタッシュを選択してpopする
    stp = !git stl | xargs git stash pop

    # スタッシュを選択してdropする
    std = !git stl | xargs git stash drop

    # マージ済みのブランチを一括削除(リモート追跡ブランチが存在しないローカルブランチを削除)
    delete-merged-branch = "!f() { git fetch -p; for branch in $(git branch -vv | grep \": gone]\" | awk '{print $1}'); do git branch -D \"$branch\"; done; }; f"

[push]
    default = current
    autoSetupRemote = true
[filter "lfs"]
    required = true
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
[pull]
    rebase = false
